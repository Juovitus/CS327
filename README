int IsBoundsValid(int x, int xMax)
    Checks if x is valid, should probably have a lower bound

static int32_t Path_Compare(const void *key, const void *with)
    IDK the instructor gave us this, it compares costs

int32_t Dijkstra_Path(mapGrid *map, struct Point from, struct Point to, uint32_t characterType)
    Does Dijkstra's algorithm with a priority queue on my map for different player types

void GenerateCostMap(uint32_t characterType)
    Generates the cost map of the given character type

void PrintCostMap(uint32_t characterType)
    Prints the cost map of the given character type

void PlacePlayerCharacter(int currX, int currY)
    Places player at a random spot given the location of the current map

void DisplayMap(mapGrid *map)
    Literally displays the map given to it

void GenerateMap()
    Generates the entire map(for starts)
    It generates the border, randomly generates the openings on the cardinal
    borders, fills the map with clearings, pathfinds between the openings,
    randomly places pokecenter and pokemart and randomly places two grass clearings.
    ^Changed to generate maps in a 2d array only when visited

void GetUserInput()
    This class gets user input and evaluates it.

int main()
    This class is the main method of the project and simply calls GenerateMap()

int GenerateRandomX(int num)
    Generates a random value for x with num being the given lower bound and returns it

int GenerateRandomY(int num)
    Generates a random value for y with num being the given lower bound and returns it

void MovePlayerCharacter(char userInputCharacter)
    Determines intended movement based off input character, checks if valid movement and if it is, moves PC.
    TO MOVE PLAYER, USE 8=NORTH, 6=EAST, 2=SOUTH, 4=WEST (NESW FOR NUMPAD ENTRY)

int IsValidPlayerMovement(int currX, int currY)
    Takes input of prospective destination we want to move to. Evaluates if it's a valid movement, returns 0 or 1 for t/f.

int IsPositionInMap(int x, int y)
    Checks if a given X/Y position is within the current map.

void PlaceNPCs()
    Generates random positions for NPCS and places them if able, priority for certain NPC types.

isValidNPCPlacement(int x, int y)
    Checks if given position for an npc placement is valid, returns integer equivalent to t/f.

void MoveNPCS()
    Calls specific npc movement functions and displays map inbetween each NPC movement

void MoveRandomWalker(nonPlayerCharacter* npc)
    Moves a RandomWalker if able

void MoveWanderer(nonPlayerCharacter* npc)
    Moves a Wanderer if able

void MovePacer (nonPlayerCharacter* npc)
    Moves a Pacer if able

void MoveRival (nonPlayerCharacter* npc)
    Moves a Rival if able

void MoveHiker (nonPlayerCharacter* npc)
    Moves a Hiker if able

int IsNpcAtXY(int x, int y)
    Loops through all NPC's on the map and check's if they're at given location

static int NPC_COMPARE(const void *key, const void *with)
    Compares move times of two NPCs

void MoveMap(int x, int y, char c)
    Helper method to move map to passed in variables.

DisplayTrainers()
    Calls a function to display 18 trainers incrementally and handles user input for the page

PrintTrainers(int screenNum, int totalScreens)
    Prints a 19 length list of trainers starting from something derived from screenNum.

EnterPokeMart()
    It enters a PokeMart

EnterPokeCenter()
    It Enters a PokeCenter

StartBattle(nonPlayerCharacter* npc)
    Starts a battle with a specific npc, won't do anything if npc is dead

void OpenFile()
    Attempts to open a file with given name at three different locations

void ParseFile(string inputFiles)
    Parses all data from given file and adds it to relevant class

void PrintParsedData(string inputFiles)
    Outputs the given class information from the input file

Controls:
    8 | k: Attempt to move player one cell up
    6 | l: Attempt to move player one cell to the right
    2 | j: Attempt to move player one cell down
    4 | h: Attempt to move player one cell to the left
    7 | y: Attempt to move player one cell to the upper left
    9 | u: Attempt to move player one cell to the upper right
    3 | n: Attempt to move player one cell to the lower right
    1 | b: Attempt to move player one cell to the lower left
    5 | Space | .: Rest for a turn.
    >: Attempt to enter a building while standing on one.
    t: Attempt to display trainer list
    ↑: Attempt to display previous list
    ↓: Attempt to display next list
    Escape: Exit trainer battle or trainer list
    q: Quit the game when on main screen